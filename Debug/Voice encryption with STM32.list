
Voice encryption with STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004244  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004404  08004404  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800440c  0800440c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000bbc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bc8  20000bc8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101e4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000203e  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00032260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d60  00000000  00000000  00033078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c47  00000000  00000000  00033dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010228  00000000  00000000  00058a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dafe7  00000000  00000000  00068c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143c2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bcc  00000000  00000000  00143c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043b4 	.word	0x080043b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080043b4 	.word	0x080043b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_PWM_PulseFinishedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if(htim==&htim1){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d104      	bne.n	80004e6 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80004dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e0:	4812      	ldr	r0, [pc, #72]	; (800052c <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 80004e2:	f001 fdb8 	bl	8002056 <HAL_GPIO_TogglePin>

	}
	if(htim==&htim2){
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d118      	bne.n	8000520 <HAL_TIM_PWM_PulseFinishedCallback+0x54>

		HAL_ADC_Start(&hadc1);
 80004ee:	4811      	ldr	r0, [pc, #68]	; (8000534 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 80004f0:	f000 fde8 	bl	80010c4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 5);
 80004f4:	2105      	movs	r1, #5
 80004f6:	480f      	ldr	r0, [pc, #60]	; (8000534 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 80004f8:	f000 feb6 	bl	8001268 <HAL_ADC_PollForConversion>
		adcVal1[0]=0xfff-HAL_ADC_GetValue(&hadc1);
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 80004fe:	f000 ff3e 	bl	800137e <HAL_ADC_GetValue>
 8000502:	4603      	mov	r3, r0
 8000504:	b29b      	uxth	r3, r3
 8000506:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800050a:	330f      	adds	r3, #15
 800050c:	b29a      	uxth	r2, r3
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8000510:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, adcVal1[0]);
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	4808      	ldr	r0, [pc, #32]	; (800053c <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800051c:	f001 fadf 	bl	8001ade <HAL_DAC_SetValue>
//
//		  }

	}

}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000af0 	.word	0x20000af0
 800052c:	40020c00 	.word	0x40020c00
 8000530:	20000b38 	.word	0x20000b38
 8000534:	20000a94 	.word	0x20000a94
 8000538:	20000094 	.word	0x20000094
 800053c:	20000adc 	.word	0x20000adc

08000540 <_Z8runCodecPt>:
void runCodec(uint16_t adcVal[128]){
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if(dataRaedy==0){
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <_Z8runCodecPt+0x4c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d116      	bne.n	800057e <_Z8runCodecPt+0x3e>
		x=0;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <_Z8runCodecPt+0x50>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
	for(uint8_t i;i<128;i++){
 8000556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800055a:	2b00      	cmp	r3, #0
 800055c:	db0c      	blt.n	8000578 <_Z8runCodecPt+0x38>

		datacodec[i]=adcVal[i];
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	441a      	add	r2, r3
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	8811      	ldrh	r1, [r2, #0]
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <_Z8runCodecPt+0x54>)
 800056c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i;i<128;i++){
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	3301      	adds	r3, #1
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	e7ee      	b.n	8000556 <_Z8runCodecPt+0x16>

	}
	dataRaedy=1;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <_Z8runCodecPt+0x4c>)
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
	}

}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	2000002b 	.word	0x2000002b
 8000590:	2000002a 	.word	0x2000002a
 8000594:	20000894 	.word	0x20000894

08000598 <_Z10feelBufferv>:
	  HAL_ADC_PollForConversion(&hadc1, 5);
	  adcVal1[x]=0xfff-HAL_ADC_GetValue(&hadc1);
	  x++;

}
void feelBuffer(){
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
	if(bufferReady==0){
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <_Z10feelBufferv+0x4c>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d118      	bne.n	80005d8 <_Z10feelBufferv+0x40>
	for(uint8_t i;i<128;i++){
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db0b      	blt.n	80005c6 <_Z10feelBufferv+0x2e>

		datacodec2[i]=datacodec[i];
 80005ae:	79fa      	ldrb	r2, [r7, #7]
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	490d      	ldr	r1, [pc, #52]	; (80005e8 <_Z10feelBufferv+0x50>)
 80005b4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <_Z10feelBufferv+0x54>)
 80005ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i;i<128;i++){
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	3301      	adds	r3, #1
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	e7ef      	b.n	80005a6 <_Z10feelBufferv+0xe>

	}
	bufferReady=1;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <_Z10feelBufferv+0x4c>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
	bufferCount=0;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <_Z10feelBufferv+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	dataRaedy=0;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <_Z10feelBufferv+0x5c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
	}

}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	2000002c 	.word	0x2000002c
 80005e8:	20000894 	.word	0x20000894
 80005ec:	20000994 	.word	0x20000994
 80005f0:	2000002d 	.word	0x2000002d
 80005f4:	2000002b 	.word	0x2000002b

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fcac 	bl	8000f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f84a 	bl	8000698 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 fa44 	bl	8000a90 <_ZL12MX_GPIO_Initv>
  MX_USART6_UART_Init();
 8000608:	f000 fa14 	bl	8000a34 <_ZL19MX_USART6_UART_Initv>
  MX_ADC1_Init();
 800060c:	f000 f8b8 	bl	8000780 <_ZL12MX_ADC1_Initv>
  MX_DAC_Init();
 8000610:	f000 f912 	bl	8000838 <_ZL11MX_DAC_Initv>
  MX_TIM1_Init();
 8000614:	f000 f954 	bl	80008c0 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000618:	f000 f9b2 	bl	8000980 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6,buff1,1);
 800061c:	2201      	movs	r2, #1
 800061e:	4914      	ldr	r1, [pc, #80]	; (8000670 <main+0x78>)
 8000620:	4814      	ldr	r0, [pc, #80]	; (8000674 <main+0x7c>)
 8000622:	f002 ff66 	bl	80034f2 <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000626:	2100      	movs	r1, #0
 8000628:	4813      	ldr	r0, [pc, #76]	; (8000678 <main+0x80>)
 800062a:	f001 fa06 	bl	8001a3a <HAL_DAC_Start>
//  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
  strcpy(buffer, "\r\nhttps://maps.google.com/?q=");
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <main+0x84>)
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <main+0x88>)
 8000632:	4614      	mov	r4, r2
 8000634:	461d      	mov	r5, r3
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800063e:	c407      	stmia	r4!, {r0, r1, r2}
 8000640:	8023      	strh	r3, [r4, #0]
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);		//start timer 1
 8000642:	2100      	movs	r1, #0
 8000644:	480f      	ldr	r0, [pc, #60]	; (8000684 <main+0x8c>)
 8000646:	f002 fa09 	bl	8002a5c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_2);
 800064a:	2104      	movs	r1, #4
 800064c:	480e      	ldr	r0, [pc, #56]	; (8000688 <main+0x90>)
 800064e:	f002 fa05 	bl	8002a5c <HAL_TIM_PWM_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		  if(x>126)runCodec(adcVal1);
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <main+0x94>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b7e      	cmp	r3, #126	; 0x7e
 8000658:	d902      	bls.n	8000660 <main+0x68>
 800065a:	480d      	ldr	r0, [pc, #52]	; (8000690 <main+0x98>)
 800065c:	f7ff ff70 	bl	8000540 <_Z8runCodecPt>
		  if(dataRaedy)feelBuffer();
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <main+0x9c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0f4      	beq.n	8000652 <main+0x5a>
 8000668:	f7ff ff96 	bl	8000598 <_Z10feelBufferv>
		  if(x>126)runCodec(adcVal1);
 800066c:	e7f1      	b.n	8000652 <main+0x5a>
 800066e:	bf00      	nop
 8000670:	20000028 	.word	0x20000028
 8000674:	20000b80 	.word	0x20000b80
 8000678:	20000adc 	.word	0x20000adc
 800067c:	20000030 	.word	0x20000030
 8000680:	080043cc 	.word	0x080043cc
 8000684:	20000af0 	.word	0x20000af0
 8000688:	20000b38 	.word	0x20000b38
 800068c:	2000002a 	.word	0x2000002a
 8000690:	20000094 	.word	0x20000094
 8000694:	2000002b 	.word	0x2000002b

08000698 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fe7c 	bl	80043a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <_Z18SystemClock_Configv+0xe0>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a2c      	ldr	r2, [pc, #176]	; (8000778 <_Z18SystemClock_Configv+0xe0>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <_Z18SystemClock_Configv+0xe0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <_Z18SystemClock_Configv+0xe4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a26      	ldr	r2, [pc, #152]	; (800077c <_Z18SystemClock_Configv+0xe4>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <_Z18SystemClock_Configv+0xe4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070c:	23a8      	movs	r3, #168	; 0xa8
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000714:	2304      	movs	r3, #4
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fcb5 	bl	800208c <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	bf14      	ite	ne
 8000728:	2301      	movne	r3, #1
 800072a:	2300      	moveq	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000732:	f000 fa0d 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2105      	movs	r1, #5
 8000754:	4618      	mov	r0, r3
 8000756:	f001 ff11 	bl	800257c <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800076a:	f000 f9f1 	bl	8000b50 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	; 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 8000794:	4a26      	ldr	r2, [pc, #152]	; (8000830 <_ZL12MX_ADC1_Initv+0xb0>)
 8000796:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 800079a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800079e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <_ZL12MX_ADC1_Initv+0xb4>)
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 80007dc:	2201      	movs	r2, #1
 80007de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e0:	4812      	ldr	r0, [pc, #72]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 80007e2:	f000 fc2b 	bl	800103c <HAL_ADC_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	bf14      	ite	ne
 80007ec:	2301      	movne	r3, #1
 80007ee:	2300      	moveq	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 80007f6:	f000 f9ab 	bl	8000b50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <_ZL12MX_ADC1_Initv+0xac>)
 800080c:	f000 fdc4 	bl	8001398 <HAL_ADC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf14      	ite	ne
 8000816:	2301      	movne	r3, #1
 8000818:	2300      	moveq	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000820:	f000 f996 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000a94 	.word	0x20000a94
 8000830:	40012000 	.word	0x40012000
 8000834:	0f000001 	.word	0x0f000001

08000838 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <_ZL11MX_DAC_Initv+0x80>)
 8000848:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <_ZL11MX_DAC_Initv+0x84>)
 800084a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800084c:	481a      	ldr	r0, [pc, #104]	; (80008b8 <_ZL11MX_DAC_Initv+0x80>)
 800084e:	f001 f8d2 	bl	80019f6 <HAL_DAC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf14      	ite	ne
 8000858:	2301      	movne	r3, #1
 800085a:	2300      	moveq	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 8000862:	f000 f975 	bl	8000b50 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	4810      	ldr	r0, [pc, #64]	; (80008b8 <_ZL11MX_DAC_Initv+0x80>)
 8000876:	f001 f957 	bl	8001b28 <HAL_DAC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 800088a:	f000 f961 	bl	8000b50 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	2210      	movs	r2, #16
 8000892:	4619      	mov	r1, r3
 8000894:	4808      	ldr	r0, [pc, #32]	; (80008b8 <_ZL11MX_DAC_Initv+0x80>)
 8000896:	f001 f947 	bl	8001b28 <HAL_DAC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	bf14      	ite	ne
 80008a0:	2301      	movne	r3, #1
 80008a2:	2300      	moveq	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <_ZL11MX_DAC_Initv+0x76>
  {
    Error_Handler();
 80008aa:	f000 f951 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000adc 	.word	0x20000adc
 80008bc:	40007400 	.word	0x40007400

080008c0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008dc:	4b26      	ldr	r3, [pc, #152]	; (8000978 <_ZL12MX_TIM1_Initv+0xb8>)
 80008de:	4a27      	ldr	r2, [pc, #156]	; (800097c <_ZL12MX_TIM1_Initv+0xbc>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000;
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <_ZL12MX_TIM1_Initv+0xb8>)
 80008e4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80008e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <_ZL12MX_TIM1_Initv+0xb8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <_ZL12MX_TIM1_Initv+0xb8>)
 80008f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <_ZL12MX_TIM1_Initv+0xb8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <_ZL12MX_TIM1_Initv+0xb8>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <_ZL12MX_TIM1_Initv+0xb8>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800090a:	481b      	ldr	r0, [pc, #108]	; (8000978 <_ZL12MX_TIM1_Initv+0xb8>)
 800090c:	f002 f856 	bl	80029bc <HAL_TIM_Base_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	bf14      	ite	ne
 8000916:	2301      	movne	r3, #1
 8000918:	2300      	moveq	r3, #0
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8000920:	f000 f916 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4619      	mov	r1, r3
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <_ZL12MX_TIM1_Initv+0xb8>)
 8000932:	f002 fab1 	bl	8002e98 <HAL_TIM_ConfigClockSource>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf14      	ite	ne
 800093c:	2301      	movne	r3, #1
 800093e:	2300      	moveq	r3, #0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8000946:	f000 f903 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4808      	ldr	r0, [pc, #32]	; (8000978 <_ZL12MX_TIM1_Initv+0xb8>)
 8000958:	f002 fcee 	bl	8003338 <HAL_TIMEx_MasterConfigSynchronization>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	bf14      	ite	ne
 8000962:	2301      	movne	r3, #1
 8000964:	2300      	moveq	r3, #0
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 800096c:	f000 f8f0 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000af0 	.word	0x20000af0
 800097c:	40010000 	.word	0x40010000

08000980 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800099c:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <_ZL12MX_TIM2_Initv+0xb0>)
 800099e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80009a6:	2264      	movs	r2, #100	; 0x64
 80009a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80009b2:	220a      	movs	r2, #10
 80009b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009c2:	481b      	ldr	r0, [pc, #108]	; (8000a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80009c4:	f001 fffa 	bl	80029bc <HAL_TIM_Base_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bf14      	ite	ne
 80009ce:	2301      	movne	r3, #1
 80009d0:	2300      	moveq	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 80009d8:	f000 f8ba 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	4619      	mov	r1, r3
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80009ea:	f002 fa55 	bl	8002e98 <HAL_TIM_ConfigClockSource>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bf14      	ite	ne
 80009f4:	2301      	movne	r3, #1
 80009f6:	2300      	moveq	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 80009fe:	f000 f8a7 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4808      	ldr	r0, [pc, #32]	; (8000a30 <_ZL12MX_TIM2_Initv+0xb0>)
 8000a10:	f002 fc92 	bl	8003338 <HAL_TIMEx_MasterConfigSynchronization>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf14      	ite	ne
 8000a1a:	2301      	movne	r3, #1
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 8000a24:	f000 f894 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000b38 	.word	0x20000b38

08000a34 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000a3a:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_ZL19MX_USART6_UART_Initv+0x58>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000a6c:	f002 fcf4 	bl	8003458 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8000a80:	f000 f866 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000b80 	.word	0x20000b80
 8000a8c:	40011400 	.word	0x40011400

08000a90 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b1c:	480b      	ldr	r0, [pc, #44]	; (8000b4c <_ZL12MX_GPIO_Initv+0xbc>)
 8000b1e:	f001 fa81 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000b22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4804      	ldr	r0, [pc, #16]	; (8000b4c <_ZL12MX_GPIO_Initv+0xbc>)
 8000b3c:	f001 f8d6 	bl	8001cec <HAL_GPIO_Init>

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020c00 	.word	0x40020c00

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_ADC_MspInit+0x7c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d127      	bne.n	8000c1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <HAL_ADC_MspInit+0x80>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c06:	2304      	movs	r3, #4
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_ADC_MspInit+0x84>)
 8000c1a:	f001 f867 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40012000 	.word	0x40012000
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_DAC_MspInit+0x7c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d127      	bne.n	8000ca6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_DAC_MspInit+0x80>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a15      	ldr	r2, [pc, #84]	; (8000cb4 <HAL_DAC_MspInit+0x80>)
 8000c60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_DAC_MspInit+0x80>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_DAC_MspInit+0x80>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_DAC_MspInit+0x80>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_DAC_MspInit+0x80>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c8e:	2330      	movs	r3, #48	; 0x30
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c92:	2303      	movs	r3, #3
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_DAC_MspInit+0x84>)
 8000ca2:	f001 f823 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40007400 	.word	0x40007400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a28      	ldr	r2, [pc, #160]	; (8000d6c <HAL_TIM_Base_MspInit+0xb0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12e      	bne.n	8000d2c <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <HAL_TIM_Base_MspInit+0xb4>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <HAL_TIM_Base_MspInit+0xb4>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <HAL_TIM_Base_MspInit+0xb4>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2018      	movs	r0, #24
 8000cf0:	f000 fe4b 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000cf4:	2018      	movs	r0, #24
 8000cf6:	f000 fe64 	bl	80019c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2019      	movs	r0, #25
 8000d00:	f000 fe43 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d04:	2019      	movs	r0, #25
 8000d06:	f000 fe5c 	bl	80019c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	201a      	movs	r0, #26
 8000d10:	f000 fe3b 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d14:	201a      	movs	r0, #26
 8000d16:	f000 fe54 	bl	80019c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	201b      	movs	r0, #27
 8000d20:	f000 fe33 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d24:	201b      	movs	r0, #27
 8000d26:	f000 fe4c 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d2a:	e01a      	b.n	8000d62 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d34:	d115      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_TIM_Base_MspInit+0xb4>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <HAL_TIM_Base_MspInit+0xb4>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_TIM_Base_MspInit+0xb4>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	201c      	movs	r0, #28
 8000d58:	f000 fe17 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d5c:	201c      	movs	r0, #28
 8000d5e:	f000 fe30 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40010000 	.word	0x40010000
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <HAL_UART_MspInit+0x94>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d133      	bne.n	8000dfe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <HAL_UART_MspInit+0x98>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <HAL_UART_MspInit+0x98>)
 8000da0:	f043 0320 	orr.w	r3, r3, #32
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_UART_MspInit+0x98>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f003 0320 	and.w	r3, r3, #32
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_UART_MspInit+0x98>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_UART_MspInit+0x98>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_UART_MspInit+0x98>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dce:	23c0      	movs	r3, #192	; 0xc0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000dde:	2308      	movs	r3, #8
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <HAL_UART_MspInit+0x9c>)
 8000dea:	f000 ff7f 	bl	8001cec <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2047      	movs	r0, #71	; 0x47
 8000df4:	f000 fdc9 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000df8:	2047      	movs	r0, #71	; 0x47
 8000dfa:	f000 fde2 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40011400 	.word	0x40011400
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020800 	.word	0x40020800

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f8cc 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e6e:	f001 ff0b 	bl	8002c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000af0 	.word	0x20000af0

08000e7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e82:	f001 ff01 	bl	8002c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000af0 	.word	0x20000af0

08000e90 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e96:	f001 fef7 	bl	8002c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000af0 	.word	0x20000af0

08000ea4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <TIM1_CC_IRQHandler+0x10>)
 8000eaa:	f001 feed 	bl	8002c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000af0 	.word	0x20000af0

08000eb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM2_IRQHandler+0x10>)
 8000ebe:	f001 fee3 	bl	8002c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000b38 	.word	0x20000b38

08000ecc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <USART6_IRQHandler+0x10>)
 8000ed2:	f002 fb3f 	bl	8003554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000b80 	.word	0x20000b80

08000ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SystemInit+0x20>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <SystemInit+0x20>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f0a:	490e      	ldr	r1, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f20:	4c0b      	ldr	r4, [pc, #44]	; (8000f50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2e:	f7ff ffd7 	bl	8000ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f32:	f003 fa13 	bl	800435c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f36:	f7ff fb5f 	bl	80005f8 <main>
  bx  lr    
 8000f3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f48:	08004414 	.word	0x08004414
  ldr r2, =_sbss
 8000f4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f50:	20000bc8 	.word	0x20000bc8

08000f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC_IRQHandler>
	...

08000f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <HAL_Init+0x40>)
 8000f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_Init+0x40>)
 8000f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x40>)
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 fcf7 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff fde6 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023c00 	.word	0x40023c00

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fd0f 	bl	80019de <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 fcd7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	20000bc4 	.word	0x20000bc4

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000bc4 	.word	0x20000bc4

0800103c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e033      	b.n	80010ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	2b00      	cmp	r3, #0
 8001058:	d109      	bne.n	800106e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fda6 	bl	8000bac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	2b00      	cmp	r3, #0
 8001078:	d118      	bne.n	80010ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001082:	f023 0302 	bic.w	r3, r3, #2
 8001086:	f043 0202 	orr.w	r2, r3, #2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 faa4 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
 80010aa:	e001      	b.n	80010b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <HAL_ADC_Start+0x1a>
 80010da:	2302      	movs	r3, #2
 80010dc:	e0b2      	b.n	8001244 <HAL_ADC_Start+0x180>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d018      	beq.n	8001126 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001104:	4b52      	ldr	r3, [pc, #328]	; (8001250 <HAL_ADC_Start+0x18c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a52      	ldr	r2, [pc, #328]	; (8001254 <HAL_ADC_Start+0x190>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	0c9a      	lsrs	r2, r3, #18
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001118:	e002      	b.n	8001120 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3b01      	subs	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f9      	bne.n	800111a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b01      	cmp	r3, #1
 8001132:	d17a      	bne.n	800122a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800115e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001172:	d106      	bne.n	8001182 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f023 0206 	bic.w	r2, r3, #6
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	645a      	str	r2, [r3, #68]	; 0x44
 8001180:	e002      	b.n	8001188 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001190:	4b31      	ldr	r3, [pc, #196]	; (8001258 <HAL_ADC_Start+0x194>)
 8001192:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800119c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d12a      	bne.n	8001200 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a2b      	ldr	r2, [pc, #172]	; (800125c <HAL_ADC_Start+0x198>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d015      	beq.n	80011e0 <HAL_ADC_Start+0x11c>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a29      	ldr	r2, [pc, #164]	; (8001260 <HAL_ADC_Start+0x19c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d105      	bne.n	80011ca <HAL_ADC_Start+0x106>
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_ADC_Start+0x194>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00a      	beq.n	80011e0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a25      	ldr	r2, [pc, #148]	; (8001264 <HAL_ADC_Start+0x1a0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d136      	bne.n	8001242 <HAL_ADC_Start+0x17e>
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_ADC_Start+0x194>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d130      	bne.n	8001242 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d129      	bne.n	8001242 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	e020      	b.n	8001242 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a15      	ldr	r2, [pc, #84]	; (800125c <HAL_ADC_Start+0x198>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d11b      	bne.n	8001242 <HAL_ADC_Start+0x17e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d114      	bne.n	8001242 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	e00b      	b.n	8001242 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f043 0210 	orr.w	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f043 0201 	orr.w	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	20000000 	.word	0x20000000
 8001254:	431bde83 	.word	0x431bde83
 8001258:	40012300 	.word	0x40012300
 800125c:	40012000 	.word	0x40012000
 8001260:	40012100 	.word	0x40012100
 8001264:	40012200 	.word	0x40012200

08001268 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001284:	d113      	bne.n	80012ae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001294:	d10b      	bne.n	80012ae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f043 0220 	orr.w	r2, r3, #32
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e063      	b.n	8001376 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ae:	f7ff feb9 	bl	8001024 <HAL_GetTick>
 80012b2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012b4:	e021      	b.n	80012fa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d01d      	beq.n	80012fa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <HAL_ADC_PollForConversion+0x6c>
 80012c4:	f7ff feae 	bl	8001024 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d212      	bcs.n	80012fa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d00b      	beq.n	80012fa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f043 0204 	orr.w	r2, r3, #4
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e03d      	b.n	8001376 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b02      	cmp	r3, #2
 8001306:	d1d6      	bne.n	80012b6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f06f 0212 	mvn.w	r2, #18
 8001310:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d123      	bne.n	8001374 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001330:	2b00      	cmp	r3, #0
 8001332:	d11f      	bne.n	8001374 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134c:	2b00      	cmp	r3, #0
 800134e:	d111      	bne.n	8001374 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d105      	bne.n	8001374 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f043 0201 	orr.w	r2, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000000 	.word	0x20000000
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e014      	b.n	8001a32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	791b      	ldrb	r3, [r3, #4]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff f90b 	bl	8000c34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2202      	movs	r2, #2
 8001a22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	795b      	ldrb	r3, [r3, #5]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_DAC_Start+0x16>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e040      	b.n	8001ad2 <HAL_DAC_Start+0x98>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6819      	ldr	r1, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2201      	movs	r2, #1
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10f      	bne.n	8001a9a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001a84:	2b3c      	cmp	r3, #60	; 0x3c
 8001a86:	d11d      	bne.n	8001ac4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	e014      	b.n	8001ac4 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	213c      	movs	r1, #60	; 0x3c
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d107      	bne.n	8001ac4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0202 	orr.w	r2, r2, #2
 8001ac2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b087      	sub	sp, #28
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	3308      	adds	r3, #8
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e004      	b.n	8001b12 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3314      	adds	r3, #20
 8001b10:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	461a      	mov	r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	795b      	ldrb	r3, [r3, #5]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_DAC_ConfigChannel+0x18>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e03c      	b.n	8001bba <HAL_DAC_ConfigChannel+0x92>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	4013      	ands	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6819      	ldr	r1, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	22c0      	movs	r2, #192	; 0xc0
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	400a      	ands	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fa26 	bl	8001024 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d008      	beq.n	8001bf8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e052      	b.n	8001c9e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0216 	bic.w	r2, r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c16:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <HAL_DMA_Abort+0x62>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0208 	bic.w	r2, r2, #8
 8001c36:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c48:	e013      	b.n	8001c72 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c4a:	f7ff f9eb 	bl	8001024 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d90c      	bls.n	8001c72 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e015      	b.n	8001c9e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e4      	bne.n	8001c4a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	223f      	movs	r2, #63	; 0x3f
 8001c86:	409a      	lsls	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d004      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e00c      	b.n	8001cde <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2205      	movs	r2, #5
 8001cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	e16b      	b.n	8001fe0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f040 815a 	bne.w	8001fda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d005      	beq.n	8001d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d130      	bne.n	8001da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d74:	2201      	movs	r2, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 0201 	and.w	r2, r3, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d017      	beq.n	8001ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d123      	bne.n	8001e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	08da      	lsrs	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3208      	adds	r2, #8
 8001df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	08da      	lsrs	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	69b9      	ldr	r1, [r7, #24]
 8001e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0203 	and.w	r2, r3, #3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80b4 	beq.w	8001fda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b60      	ldr	r3, [pc, #384]	; (8001ff8 <HAL_GPIO_Init+0x30c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a5f      	ldr	r2, [pc, #380]	; (8001ff8 <HAL_GPIO_Init+0x30c>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_GPIO_Init+0x30c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8e:	4a5b      	ldr	r2, [pc, #364]	; (8001ffc <HAL_GPIO_Init+0x310>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a52      	ldr	r2, [pc, #328]	; (8002000 <HAL_GPIO_Init+0x314>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d02b      	beq.n	8001f12 <HAL_GPIO_Init+0x226>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a51      	ldr	r2, [pc, #324]	; (8002004 <HAL_GPIO_Init+0x318>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d025      	beq.n	8001f0e <HAL_GPIO_Init+0x222>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a50      	ldr	r2, [pc, #320]	; (8002008 <HAL_GPIO_Init+0x31c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01f      	beq.n	8001f0a <HAL_GPIO_Init+0x21e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4f      	ldr	r2, [pc, #316]	; (800200c <HAL_GPIO_Init+0x320>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d019      	beq.n	8001f06 <HAL_GPIO_Init+0x21a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4e      	ldr	r2, [pc, #312]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0x216>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4d      	ldr	r2, [pc, #308]	; (8002014 <HAL_GPIO_Init+0x328>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00d      	beq.n	8001efe <HAL_GPIO_Init+0x212>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4c      	ldr	r2, [pc, #304]	; (8002018 <HAL_GPIO_Init+0x32c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <HAL_GPIO_Init+0x20e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4b      	ldr	r2, [pc, #300]	; (800201c <HAL_GPIO_Init+0x330>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_GPIO_Init+0x20a>
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	e00e      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	e00c      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001efa:	2306      	movs	r3, #6
 8001efc:	e00a      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001efe:	2305      	movs	r3, #5
 8001f00:	e008      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001f02:	2304      	movs	r3, #4
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001f06:	2303      	movs	r3, #3
 8001f08:	e004      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001f12:	2300      	movs	r3, #0
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	f002 0203 	and.w	r2, r2, #3
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	4093      	lsls	r3, r2
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f24:	4935      	ldr	r1, [pc, #212]	; (8001ffc <HAL_GPIO_Init+0x310>)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f32:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f56:	4a32      	ldr	r2, [pc, #200]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f5c:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f80:	4a27      	ldr	r2, [pc, #156]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001faa:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd4:	4a12      	ldr	r2, [pc, #72]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b0f      	cmp	r3, #15
 8001fe4:	f67f ae90 	bls.w	8001d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40013800 	.word	0x40013800
 8002000:	40020000 	.word	0x40020000
 8002004:	40020400 	.word	0x40020400
 8002008:	40020800 	.word	0x40020800
 800200c:	40020c00 	.word	0x40020c00
 8002010:	40021000 	.word	0x40021000
 8002014:	40021400 	.word	0x40021400
 8002018:	40021800 	.word	0x40021800
 800201c:	40021c00 	.word	0x40021c00
 8002020:	40013c00 	.word	0x40013c00

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002056:	b480      	push	{r7}
 8002058:	b085      	sub	sp, #20
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002068:	887a      	ldrh	r2, [r7, #2]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	041a      	lsls	r2, r3, #16
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43d9      	mvns	r1, r3
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	400b      	ands	r3, r1
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	619a      	str	r2, [r3, #24]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e267      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d075      	beq.n	8002196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d00c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4b85      	ldr	r3, [pc, #532]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d112      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c2:	4b82      	ldr	r3, [pc, #520]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ce:	d10b      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	4b7e      	ldr	r3, [pc, #504]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d05b      	beq.n	8002194 <HAL_RCC_OscConfig+0x108>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d157      	bne.n	8002194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e242      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x74>
 80020f2:	4b76      	ldr	r3, [pc, #472]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a75      	ldr	r2, [pc, #468]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e01d      	b.n	800213c <HAL_RCC_OscConfig+0xb0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x98>
 800210a:	4b70      	ldr	r3, [pc, #448]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6f      	ldr	r2, [pc, #444]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b6d      	ldr	r3, [pc, #436]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6c      	ldr	r2, [pc, #432]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xb0>
 8002124:	4b69      	ldr	r3, [pc, #420]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a68      	ldr	r2, [pc, #416]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b66      	ldr	r3, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a65      	ldr	r2, [pc, #404]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe ff6e 	bl	8001024 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214c:	f7fe ff6a 	bl	8001024 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e207      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xc0>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe ff5a 	bl	8001024 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002174:	f7fe ff56 	bl	8001024 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1f3      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	4b51      	ldr	r3, [pc, #324]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0xe8>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d063      	beq.n	800226a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a2:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d11c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ba:	4b44      	ldr	r3, [pc, #272]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d116      	bne.n	80021f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_RCC_OscConfig+0x152>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e1c7      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4937      	ldr	r1, [pc, #220]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	e03a      	b.n	800226a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fc:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_RCC_OscConfig+0x244>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7fe ff0f 	bl	8001024 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220a:	f7fe ff0b 	bl	8001024 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1a8      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4925      	ldr	r1, [pc, #148]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	e015      	b.n	800226a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCC_OscConfig+0x244>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe feee 	bl	8001024 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224c:	f7fe feea 	bl	8001024 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e187      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d036      	beq.n	80022e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d016      	beq.n	80022ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_RCC_OscConfig+0x248>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe fece 	bl	8001024 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228c:	f7fe feca 	bl	8001024 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e167      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80022a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x200>
 80022aa:	e01b      	b.n	80022e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_OscConfig+0x248>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7fe feb7 	bl	8001024 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	e00e      	b.n	80022d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ba:	f7fe feb3 	bl	8001024 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d907      	bls.n	80022d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e150      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
 80022cc:	40023800 	.word	0x40023800
 80022d0:	42470000 	.word	0x42470000
 80022d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	4b88      	ldr	r3, [pc, #544]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80022da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ea      	bne.n	80022ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8097 	beq.w	8002420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f6:	4b81      	ldr	r3, [pc, #516]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10f      	bne.n	8002322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	4b7d      	ldr	r3, [pc, #500]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a7c      	ldr	r2, [pc, #496]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	4b7a      	ldr	r3, [pc, #488]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231e:	2301      	movs	r3, #1
 8002320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b77      	ldr	r3, [pc, #476]	; (8002500 <HAL_RCC_OscConfig+0x474>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232e:	4b74      	ldr	r3, [pc, #464]	; (8002500 <HAL_RCC_OscConfig+0x474>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a73      	ldr	r2, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x474>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233a:	f7fe fe73 	bl	8001024 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7fe fe6f 	bl	8001024 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e10c      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_RCC_OscConfig+0x474>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x2ea>
 8002368:	4b64      	ldr	r3, [pc, #400]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	4a63      	ldr	r2, [pc, #396]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6713      	str	r3, [r2, #112]	; 0x70
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x324>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b05      	cmp	r3, #5
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x30c>
 800237e:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	4a5e      	ldr	r2, [pc, #376]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	6713      	str	r3, [r2, #112]	; 0x70
 800238a:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	4a5b      	ldr	r2, [pc, #364]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6713      	str	r3, [r2, #112]	; 0x70
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0x324>
 8002398:	4b58      	ldr	r3, [pc, #352]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	4a57      	ldr	r2, [pc, #348]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	6713      	str	r3, [r2, #112]	; 0x70
 80023a4:	4b55      	ldr	r3, [pc, #340]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a54      	ldr	r2, [pc, #336]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80023aa:	f023 0304 	bic.w	r3, r3, #4
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe fe34 	bl	8001024 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f7fe fe30 	bl	8001024 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e0cb      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	4b49      	ldr	r3, [pc, #292]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0ee      	beq.n	80023c0 <HAL_RCC_OscConfig+0x334>
 80023e2:	e014      	b.n	800240e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e4:	f7fe fe1e 	bl	8001024 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7fe fe1a 	bl	8001024 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0b5      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002402:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ee      	bne.n	80023ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d105      	bne.n	8002420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002414:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	4a38      	ldr	r2, [pc, #224]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800241a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80a1 	beq.w	800256c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800242a:	4b34      	ldr	r3, [pc, #208]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b08      	cmp	r3, #8
 8002434:	d05c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d141      	bne.n	80024c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_RCC_OscConfig+0x478>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fdee 	bl	8001024 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fdea 	bl	8001024 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e087      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b27      	ldr	r3, [pc, #156]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	3b01      	subs	r3, #1
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	491b      	ldr	r1, [pc, #108]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCC_OscConfig+0x478>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7fe fdc3 	bl	8001024 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a2:	f7fe fdbf 	bl	8001024 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e05c      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x416>
 80024c0:	e054      	b.n	800256c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_RCC_OscConfig+0x478>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe fdac 	bl	8001024 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe fda8 	bl	8001024 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e045      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x444>
 80024ee:	e03d      	b.n	800256c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e038      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000
 8002504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x4ec>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d028      	beq.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d121      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d11a      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002538:	4013      	ands	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800253e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002540:	4293      	cmp	r3, r2
 8002542:	d111      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	3b01      	subs	r3, #1
 8002552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d107      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800

0800257c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0cc      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d90c      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d044      	beq.n	800269c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d119      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d003      	beq.n	800263a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002636:	2b03      	cmp	r3, #3
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e067      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b37      	ldr	r3, [pc, #220]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4934      	ldr	r1, [pc, #208]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7fe fcda 	bl	8001024 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	e00a      	b.n	800268a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7fe fcd6 	bl	8001024 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e04f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 020c 	and.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	429a      	cmp	r2, r3
 800269a:	d1eb      	bne.n	8002674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d20c      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002702:	f000 f821 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fc3a 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023c00 	.word	0x40023c00
 8002738:	40023800 	.word	0x40023800
 800273c:	080043ec 	.word	0x080043ec
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800274c:	b094      	sub	sp, #80	; 0x50
 800274e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	647b      	str	r3, [r7, #68]	; 0x44
 8002754:	2300      	movs	r3, #0
 8002756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002758:	2300      	movs	r3, #0
 800275a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002760:	4b79      	ldr	r3, [pc, #484]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d00d      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x40>
 800276c:	2b08      	cmp	r3, #8
 800276e:	f200 80e1 	bhi.w	8002934 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x34>
 8002776:	2b04      	cmp	r3, #4
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x3a>
 800277a:	e0db      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b73      	ldr	r3, [pc, #460]	; (800294c <HAL_RCC_GetSysClockFreq+0x204>)
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002780:	e0db      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002782:	4b73      	ldr	r3, [pc, #460]	; (8002950 <HAL_RCC_GetSysClockFreq+0x208>)
 8002784:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002786:	e0d8      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002788:	4b6f      	ldr	r3, [pc, #444]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002790:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002792:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d063      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279e:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	2200      	movs	r2, #0
 80027a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
 80027b2:	2300      	movs	r3, #0
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34
 80027b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027ba:	4622      	mov	r2, r4
 80027bc:	462b      	mov	r3, r5
 80027be:	f04f 0000 	mov.w	r0, #0
 80027c2:	f04f 0100 	mov.w	r1, #0
 80027c6:	0159      	lsls	r1, r3, #5
 80027c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027cc:	0150      	lsls	r0, r2, #5
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4621      	mov	r1, r4
 80027d4:	1a51      	subs	r1, r2, r1
 80027d6:	6139      	str	r1, [r7, #16]
 80027d8:	4629      	mov	r1, r5
 80027da:	eb63 0301 	sbc.w	r3, r3, r1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027ec:	4659      	mov	r1, fp
 80027ee:	018b      	lsls	r3, r1, #6
 80027f0:	4651      	mov	r1, sl
 80027f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027f6:	4651      	mov	r1, sl
 80027f8:	018a      	lsls	r2, r1, #6
 80027fa:	4651      	mov	r1, sl
 80027fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002800:	4659      	mov	r1, fp
 8002802:	eb63 0901 	sbc.w	r9, r3, r1
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800281a:	4690      	mov	r8, r2
 800281c:	4699      	mov	r9, r3
 800281e:	4623      	mov	r3, r4
 8002820:	eb18 0303 	adds.w	r3, r8, r3
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	462b      	mov	r3, r5
 8002828:	eb49 0303 	adc.w	r3, r9, r3
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800283a:	4629      	mov	r1, r5
 800283c:	024b      	lsls	r3, r1, #9
 800283e:	4621      	mov	r1, r4
 8002840:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002844:	4621      	mov	r1, r4
 8002846:	024a      	lsls	r2, r1, #9
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284e:	2200      	movs	r2, #0
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
 8002852:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002858:	f7fd fcb6 	bl	80001c8 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4613      	mov	r3, r2
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002864:	e058      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002866:	4b38      	ldr	r3, [pc, #224]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	2200      	movs	r2, #0
 800286e:	4618      	mov	r0, r3
 8002870:	4611      	mov	r1, r2
 8002872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002876:	623b      	str	r3, [r7, #32]
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
 800287c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002880:	4642      	mov	r2, r8
 8002882:	464b      	mov	r3, r9
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	0159      	lsls	r1, r3, #5
 800288e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002892:	0150      	lsls	r0, r2, #5
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4641      	mov	r1, r8
 800289a:	ebb2 0a01 	subs.w	sl, r2, r1
 800289e:	4649      	mov	r1, r9
 80028a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028b8:	ebb2 040a 	subs.w	r4, r2, sl
 80028bc:	eb63 050b 	sbc.w	r5, r3, fp
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	00eb      	lsls	r3, r5, #3
 80028ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ce:	00e2      	lsls	r2, r4, #3
 80028d0:	4614      	mov	r4, r2
 80028d2:	461d      	mov	r5, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	18e3      	adds	r3, r4, r3
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	464b      	mov	r3, r9
 80028dc:	eb45 0303 	adc.w	r3, r5, r3
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ee:	4629      	mov	r1, r5
 80028f0:	028b      	lsls	r3, r1, #10
 80028f2:	4621      	mov	r1, r4
 80028f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f8:	4621      	mov	r1, r4
 80028fa:	028a      	lsls	r2, r1, #10
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	2200      	movs	r2, #0
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	61fa      	str	r2, [r7, #28]
 8002908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800290c:	f7fd fc5c 	bl	80001c8 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4613      	mov	r3, r2
 8002916:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	3301      	adds	r3, #1
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800292a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002932:	e002      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetSysClockFreq+0x204>)
 8002936:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800293a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800293c:	4618      	mov	r0, r3
 800293e:	3750      	adds	r7, #80	; 0x50
 8002940:	46bd      	mov	sp, r7
 8002942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	00f42400 	.word	0x00f42400
 8002950:	007a1200 	.word	0x007a1200

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_RCC_GetHCLKFreq+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000000 	.word	0x20000000

0800296c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002970:	f7ff fff0 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	080043fc 	.word	0x080043fc

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002998:	f7ff ffdc 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0b5b      	lsrs	r3, r3, #13
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4903      	ldr	r1, [pc, #12]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	080043fc 	.word	0x080043fc

080029bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e041      	b.n	8002a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe f96a 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 fb3c 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d109      	bne.n	8002a84 <HAL_TIM_PWM_Start_IT+0x28>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e022      	b.n	8002aca <HAL_TIM_PWM_Start_IT+0x6e>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d109      	bne.n	8002a9e <HAL_TIM_PWM_Start_IT+0x42>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e015      	b.n	8002aca <HAL_TIM_PWM_Start_IT+0x6e>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d109      	bne.n	8002ab8 <HAL_TIM_PWM_Start_IT+0x5c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e008      	b.n	8002aca <HAL_TIM_PWM_Start_IT+0x6e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0c7      	b.n	8002c62 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <HAL_TIM_PWM_Start_IT+0x86>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae0:	e013      	b.n	8002b0a <HAL_TIM_PWM_Start_IT+0xae>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d104      	bne.n	8002af2 <HAL_TIM_PWM_Start_IT+0x96>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af0:	e00b      	b.n	8002b0a <HAL_TIM_PWM_Start_IT+0xae>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d104      	bne.n	8002b02 <HAL_TIM_PWM_Start_IT+0xa6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b00:	e003      	b.n	8002b0a <HAL_TIM_PWM_Start_IT+0xae>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d841      	bhi.n	8002b94 <HAL_TIM_PWM_Start_IT+0x138>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b4d 	.word	0x08002b4d
 8002b1c:	08002b95 	.word	0x08002b95
 8002b20:	08002b95 	.word	0x08002b95
 8002b24:	08002b95 	.word	0x08002b95
 8002b28:	08002b5f 	.word	0x08002b5f
 8002b2c:	08002b95 	.word	0x08002b95
 8002b30:	08002b95 	.word	0x08002b95
 8002b34:	08002b95 	.word	0x08002b95
 8002b38:	08002b71 	.word	0x08002b71
 8002b3c:	08002b95 	.word	0x08002b95
 8002b40:	08002b95 	.word	0x08002b95
 8002b44:	08002b95 	.word	0x08002b95
 8002b48:	08002b83 	.word	0x08002b83
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0202 	orr.w	r2, r2, #2
 8002b5a:	60da      	str	r2, [r3, #12]
      break;
 8002b5c:	e01d      	b.n	8002b9a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0204 	orr.w	r2, r2, #4
 8002b6c:	60da      	str	r2, [r3, #12]
      break;
 8002b6e:	e014      	b.n	8002b9a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0208 	orr.w	r2, r2, #8
 8002b7e:	60da      	str	r2, [r3, #12]
      break;
 8002b80:	e00b      	b.n	8002b9a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0210 	orr.w	r2, r2, #16
 8002b90:	60da      	str	r2, [r3, #12]
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      break;
 8002b98:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d15f      	bne.n	8002c60 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	6839      	ldr	r1, [r7, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fb9f 	bl	80032ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2e      	ldr	r2, [pc, #184]	; (8002c6c <HAL_TIM_PWM_Start_IT+0x210>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_TIM_PWM_Start_IT+0x166>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2c      	ldr	r2, [pc, #176]	; (8002c70 <HAL_TIM_PWM_Start_IT+0x214>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_TIM_PWM_Start_IT+0x16a>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_TIM_PWM_Start_IT+0x16c>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <HAL_TIM_PWM_Start_IT+0x210>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d022      	beq.n	8002c2c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bee:	d01d      	beq.n	8002c2c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_TIM_PWM_Start_IT+0x218>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d018      	beq.n	8002c2c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <HAL_TIM_PWM_Start_IT+0x21c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_TIM_PWM_Start_IT+0x220>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00e      	beq.n	8002c2c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <HAL_TIM_PWM_Start_IT+0x214>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <HAL_TIM_PWM_Start_IT+0x224>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_TIM_PWM_Start_IT+0x1d0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_TIM_PWM_Start_IT+0x228>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d111      	bne.n	8002c50 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d010      	beq.n	8002c60 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4e:	e007      	b.n	8002c60 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40010400 	.word	0x40010400
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40014000 	.word	0x40014000
 8002c84:	40001800 	.word	0x40001800

08002c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d122      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d11b      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0202 	mvn.w	r2, #2
 8002cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f9bf 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f9b1 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7fd fbf7 	bl	80004cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d122      	bne.n	8002d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d11b      	bne.n	8002d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0204 	mvn.w	r2, #4
 8002d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f995 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f987 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7fd fbcd 	bl	80004cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d122      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d11b      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0208 	mvn.w	r2, #8
 8002d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2204      	movs	r2, #4
 8002d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f96b 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f95d 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7fd fba3 	bl	80004cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d122      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d11b      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0210 	mvn.w	r2, #16
 8002db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2208      	movs	r2, #8
 8002db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f941 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002dcc:	e005      	b.n	8002dda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f933 	bl	800303a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fd fb79 	bl	80004cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d10e      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0201 	mvn.w	r2, #1
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f90d 	bl	8003026 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b80      	cmp	r3, #128	; 0x80
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	d107      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fb06 	bl	8003444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b40      	cmp	r3, #64	; 0x40
 8002e44:	d10e      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d107      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8ff 	bl	8003062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0220 	mvn.w	r2, #32
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fad0 	bl	8003430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0b4      	b.n	800301e <HAL_TIM_ConfigClockSource+0x186>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eec:	d03e      	beq.n	8002f6c <HAL_TIM_ConfigClockSource+0xd4>
 8002eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef2:	f200 8087 	bhi.w	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efa:	f000 8086 	beq.w	800300a <HAL_TIM_ConfigClockSource+0x172>
 8002efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f02:	d87f      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b70      	cmp	r3, #112	; 0x70
 8002f06:	d01a      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0xa6>
 8002f08:	2b70      	cmp	r3, #112	; 0x70
 8002f0a:	d87b      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b60      	cmp	r3, #96	; 0x60
 8002f0e:	d050      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x11a>
 8002f10:	2b60      	cmp	r3, #96	; 0x60
 8002f12:	d877      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f14:	2b50      	cmp	r3, #80	; 0x50
 8002f16:	d03c      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0xfa>
 8002f18:	2b50      	cmp	r3, #80	; 0x50
 8002f1a:	d873      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d058      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x13a>
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d86f      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f24:	2b30      	cmp	r3, #48	; 0x30
 8002f26:	d064      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f28:	2b30      	cmp	r3, #48	; 0x30
 8002f2a:	d86b      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d060      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d867      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d05c      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d05a      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f3c:	e062      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6899      	ldr	r1, [r3, #8]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f000 f9ad 	bl	80032ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	609a      	str	r2, [r3, #8]
      break;
 8002f6a:	e04f      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6899      	ldr	r1, [r3, #8]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f000 f996 	bl	80032ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8e:	609a      	str	r2, [r3, #8]
      break;
 8002f90:	e03c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 f90a 	bl	80031b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2150      	movs	r1, #80	; 0x50
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f963 	bl	8003276 <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e02c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f000 f929 	bl	8003216 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2160      	movs	r1, #96	; 0x60
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f953 	bl	8003276 <TIM_ITRx_SetConfig>
      break;
 8002fd0:	e01c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f000 f8ea 	bl	80031b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2140      	movs	r1, #64	; 0x40
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f943 	bl	8003276 <TIM_ITRx_SetConfig>
      break;
 8002ff0:	e00c      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f000 f93a 	bl	8003276 <TIM_ITRx_SetConfig>
      break;
 8003002:	e003      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      break;
 8003008:	e000      	b.n	800300c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800300a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a40      	ldr	r2, [pc, #256]	; (800318c <TIM_Base_SetConfig+0x114>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d013      	beq.n	80030b8 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003096:	d00f      	beq.n	80030b8 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3d      	ldr	r2, [pc, #244]	; (8003190 <TIM_Base_SetConfig+0x118>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00b      	beq.n	80030b8 <TIM_Base_SetConfig+0x40>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a3c      	ldr	r2, [pc, #240]	; (8003194 <TIM_Base_SetConfig+0x11c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <TIM_Base_SetConfig+0x40>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a3b      	ldr	r2, [pc, #236]	; (8003198 <TIM_Base_SetConfig+0x120>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d003      	beq.n	80030b8 <TIM_Base_SetConfig+0x40>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a3a      	ldr	r2, [pc, #232]	; (800319c <TIM_Base_SetConfig+0x124>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d108      	bne.n	80030ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2f      	ldr	r2, [pc, #188]	; (800318c <TIM_Base_SetConfig+0x114>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d02b      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d8:	d027      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a2c      	ldr	r2, [pc, #176]	; (8003190 <TIM_Base_SetConfig+0x118>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d023      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <TIM_Base_SetConfig+0x11c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01f      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a2a      	ldr	r2, [pc, #168]	; (8003198 <TIM_Base_SetConfig+0x120>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01b      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a29      	ldr	r2, [pc, #164]	; (800319c <TIM_Base_SetConfig+0x124>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d017      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a28      	ldr	r2, [pc, #160]	; (80031a0 <TIM_Base_SetConfig+0x128>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a27      	ldr	r2, [pc, #156]	; (80031a4 <TIM_Base_SetConfig+0x12c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00f      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <TIM_Base_SetConfig+0x130>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00b      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a25      	ldr	r2, [pc, #148]	; (80031ac <TIM_Base_SetConfig+0x134>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d007      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a24      	ldr	r2, [pc, #144]	; (80031b0 <TIM_Base_SetConfig+0x138>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d003      	beq.n	800312a <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a23      	ldr	r2, [pc, #140]	; (80031b4 <TIM_Base_SetConfig+0x13c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d108      	bne.n	800313c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <TIM_Base_SetConfig+0x114>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_Base_SetConfig+0xf8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a0c      	ldr	r2, [pc, #48]	; (800319c <TIM_Base_SetConfig+0x124>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d103      	bne.n	8003178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	615a      	str	r2, [r3, #20]
}
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40010000 	.word	0x40010000
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800
 8003198:	40000c00 	.word	0x40000c00
 800319c:	40010400 	.word	0x40010400
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800
 80031ac:	40001800 	.word	0x40001800
 80031b0:	40001c00 	.word	0x40001c00
 80031b4:	40002000 	.word	0x40002000

080031b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f023 0201 	bic.w	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 030a 	bic.w	r3, r3, #10
 80031f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	621a      	str	r2, [r3, #32]
}
 800320a:	bf00      	nop
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003216:	b480      	push	{r7}
 8003218:	b087      	sub	sp, #28
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f023 0210 	bic.w	r2, r3, #16
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	031b      	lsls	r3, r3, #12
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	f043 0307 	orr.w	r3, r3, #7
 8003298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	609a      	str	r2, [r3, #8]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	021a      	lsls	r2, r3, #8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	609a      	str	r2, [r3, #8]
}
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2201      	movs	r2, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a1a      	ldr	r2, [r3, #32]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	43db      	mvns	r3, r3
 800330e:	401a      	ands	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1a      	ldr	r2, [r3, #32]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	431a      	orrs	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	621a      	str	r2, [r3, #32]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800334c:	2302      	movs	r3, #2
 800334e:	e05a      	b.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a21      	ldr	r2, [pc, #132]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d022      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339c:	d01d      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d018      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1b      	ldr	r2, [pc, #108]	; (800341c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1a      	ldr	r2, [pc, #104]	; (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00e      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a18      	ldr	r2, [pc, #96]	; (8003424 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a17      	ldr	r2, [pc, #92]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a15      	ldr	r2, [pc, #84]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10c      	bne.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40010000 	.word	0x40010000
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40000c00 	.word	0x40000c00
 8003424:	40010400 	.word	0x40010400
 8003428:	40014000 	.word	0x40014000
 800342c:	40001800 	.word	0x40001800

08003430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e03f      	b.n	80034ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd fc78 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	; 0x24
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800349a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fce9 	bl	8003e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	4613      	mov	r3, r2
 80034fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b20      	cmp	r3, #32
 800350a:	d11d      	bne.n	8003548 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_UART_Receive_IT+0x26>
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e016      	b.n	800354a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_UART_Receive_IT+0x38>
 8003526:	2302      	movs	r3, #2
 8003528:	e00f      	b.n	800354a <HAL_UART_Receive_IT+0x58>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	461a      	mov	r2, r3
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fac0 	bl	8003ac4 <UART_Start_Receive_IT>
 8003544:	4603      	mov	r3, r0
 8003546:	e000      	b.n	800354a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b0ba      	sub	sp, #232	; 0xe8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_UART_IRQHandler+0x66>
 80035a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fba3 	bl	8003cfe <UART_Receive_IT>
      return;
 80035b8:	e256      	b.n	8003a68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80de 	beq.w	8003780 <HAL_UART_IRQHandler+0x22c>
 80035c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d106      	bne.n	80035de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80d1 	beq.w	8003780 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_UART_IRQHandler+0xae>
 80035ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_UART_IRQHandler+0xd2>
 800360e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f043 0202 	orr.w	r2, r3, #2
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_UART_IRQHandler+0xf6>
 8003632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f043 0204 	orr.w	r2, r3, #4
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d011      	beq.n	800367a <HAL_UART_IRQHandler+0x126>
 8003656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d105      	bne.n	800366e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f043 0208 	orr.w	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 81ed 	beq.w	8003a5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_UART_IRQHandler+0x14e>
 8003690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fb2e 	bl	8003cfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <HAL_UART_IRQHandler+0x17a>
 80036c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d04f      	beq.n	800376e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa36 	bl	8003b40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d141      	bne.n	8003766 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3314      	adds	r3, #20
 800370a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800370e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800371a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1d9      	bne.n	80036e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	2b00      	cmp	r3, #0
 8003734:	d013      	beq.n	800375e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	4a7d      	ldr	r2, [pc, #500]	; (8003930 <HAL_UART_IRQHandler+0x3dc>)
 800373c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe faaf 	bl	8001ca6 <HAL_DMA_Abort_IT>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003758:	4610      	mov	r0, r2
 800375a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375c:	e00e      	b.n	800377c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f99a 	bl	8003a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003764:	e00a      	b.n	800377c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f996 	bl	8003a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800376c:	e006      	b.n	800377c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f992 	bl	8003a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800377a:	e170      	b.n	8003a5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	bf00      	nop
    return;
 800377e:	e16e      	b.n	8003a5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	2b01      	cmp	r3, #1
 8003786:	f040 814a 	bne.w	8003a1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8143 	beq.w	8003a1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 813c 	beq.w	8003a1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	f040 80b4 	bne.w	8003934 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8140 	beq.w	8003a62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037ea:	429a      	cmp	r2, r3
 80037ec:	f080 8139 	bcs.w	8003a62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003802:	f000 8088 	beq.w	8003916 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	330c      	adds	r3, #12
 800380c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800381c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800383e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800384a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1d9      	bne.n	8003806 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3314      	adds	r3, #20
 8003858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3314      	adds	r3, #20
 8003872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003876:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800387a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800387e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e1      	bne.n	8003852 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3314      	adds	r3, #20
 8003894:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800389e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e3      	bne.n	800388e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e6:	f023 0310 	bic.w	r3, r3, #16
 80038ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80038fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e3      	bne.n	80038d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe f958 	bl	8001bc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800391e:	b29b      	uxth	r3, r3
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	b29b      	uxth	r3, r3
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f8c0 	bl	8003aac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800392c:	e099      	b.n	8003a62 <HAL_UART_IRQHandler+0x50e>
 800392e:	bf00      	nop
 8003930:	08003c07 	.word	0x08003c07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800393c:	b29b      	uxth	r3, r3
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 808b 	beq.w	8003a66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8086 	beq.w	8003a66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	330c      	adds	r3, #12
 8003960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003970:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800397e:	647a      	str	r2, [r7, #68]	; 0x44
 8003980:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800398c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e3      	bne.n	800395a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	623b      	str	r3, [r7, #32]
   return(result);
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3314      	adds	r3, #20
 80039b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039b6:	633a      	str	r2, [r7, #48]	; 0x30
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e3      	bne.n	8003992 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	330c      	adds	r3, #12
 80039de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0310 	bic.w	r3, r3, #16
 80039ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80039fc:	61fa      	str	r2, [r7, #28]
 80039fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	69b9      	ldr	r1, [r7, #24]
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	617b      	str	r3, [r7, #20]
   return(result);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e3      	bne.n	80039d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f848 	bl	8003aac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a1c:	e023      	b.n	8003a66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_UART_IRQHandler+0x4ea>
 8003a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f8f9 	bl	8003c2e <UART_Transmit_IT>
    return;
 8003a3c:	e014      	b.n	8003a68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00e      	beq.n	8003a68 <HAL_UART_IRQHandler+0x514>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f939 	bl	8003cce <UART_EndTransmit_IT>
    return;
 8003a5c:	e004      	b.n	8003a68 <HAL_UART_IRQHandler+0x514>
    return;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <HAL_UART_IRQHandler+0x514>
      return;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <HAL_UART_IRQHandler+0x514>
      return;
 8003a66:	bf00      	nop
  }
}
 8003a68:	37e8      	adds	r7, #232	; 0xe8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop

08003a70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	88fa      	ldrh	r2, [r7, #6]
 8003adc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	88fa      	ldrh	r2, [r7, #6]
 8003ae2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2222      	movs	r2, #34	; 0x22
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b10:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0220 	orr.w	r2, r2, #32
 8003b30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b095      	sub	sp, #84	; 0x54
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b68:	643a      	str	r2, [r7, #64]	; 0x40
 8003b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e5      	bne.n	8003b48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3314      	adds	r3, #20
 8003b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3314      	adds	r3, #20
 8003b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e5      	bne.n	8003b7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d119      	bne.n	8003bec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f023 0310 	bic.w	r3, r3, #16
 8003bce:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bd8:	61ba      	str	r2, [r7, #24]
 8003bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6979      	ldr	r1, [r7, #20]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	613b      	str	r3, [r7, #16]
   return(result);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e5      	bne.n	8003bb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bfa:	bf00      	nop
 8003bfc:	3754      	adds	r7, #84	; 0x54
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7ff ff39 	bl	8003a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b21      	cmp	r3, #33	; 0x21
 8003c40:	d13e      	bne.n	8003cc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4a:	d114      	bne.n	8003c76 <UART_Transmit_IT+0x48>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d110      	bne.n	8003c76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	1c9a      	adds	r2, r3, #2
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	621a      	str	r2, [r3, #32]
 8003c74:	e008      	b.n	8003c88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	1c59      	adds	r1, r3, #1
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6211      	str	r1, [r2, #32]
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4619      	mov	r1, r3
 8003c96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10f      	bne.n	8003cbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003caa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e000      	b.n	8003cc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff febe 	bl	8003a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b08c      	sub	sp, #48	; 0x30
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b22      	cmp	r3, #34	; 0x22
 8003d10:	f040 80ab 	bne.w	8003e6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d117      	bne.n	8003d4e <UART_Receive_IT+0x50>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d113      	bne.n	8003d4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	1c9a      	adds	r2, r3, #2
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d4c:	e026      	b.n	8003d9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d60:	d007      	beq.n	8003d72 <UART_Receive_IT+0x74>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <UART_Receive_IT+0x82>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e008      	b.n	8003d92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4619      	mov	r1, r3
 8003daa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d15a      	bne.n	8003e66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0220 	bic.w	r2, r2, #32
 8003dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d135      	bne.n	8003e5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	613b      	str	r3, [r7, #16]
   return(result);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f023 0310 	bic.w	r3, r3, #16
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e16:	623a      	str	r2, [r7, #32]
 8003e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	69f9      	ldr	r1, [r7, #28]
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e5      	bne.n	8003df6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d10a      	bne.n	8003e4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fe29 	bl	8003aac <HAL_UARTEx_RxEventCallback>
 8003e5a:	e002      	b.n	8003e62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff fe11 	bl	8003a84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e002      	b.n	8003e6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e000      	b.n	8003e6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
  }
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3730      	adds	r7, #48	; 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e78:	b0c0      	sub	sp, #256	; 0x100
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e90:	68d9      	ldr	r1, [r3, #12]
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	ea40 0301 	orr.w	r3, r0, r1
 8003e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ecc:	f021 010c 	bic.w	r1, r1, #12
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eda:	430b      	orrs	r3, r1
 8003edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eee:	6999      	ldr	r1, [r3, #24]
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	ea40 0301 	orr.w	r3, r0, r1
 8003efa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b8f      	ldr	r3, [pc, #572]	; (8004140 <UART_SetConfig+0x2cc>)
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d005      	beq.n	8003f14 <UART_SetConfig+0xa0>
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b8d      	ldr	r3, [pc, #564]	; (8004144 <UART_SetConfig+0x2d0>)
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d104      	bne.n	8003f1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7fe fd3e 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8003f18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f1c:	e003      	b.n	8003f26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f1e:	f7fe fd25 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 8003f22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f30:	f040 810c 	bne.w	800414c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f46:	4622      	mov	r2, r4
 8003f48:	462b      	mov	r3, r5
 8003f4a:	1891      	adds	r1, r2, r2
 8003f4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f4e:	415b      	adcs	r3, r3
 8003f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f56:	4621      	mov	r1, r4
 8003f58:	eb12 0801 	adds.w	r8, r2, r1
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	eb43 0901 	adc.w	r9, r3, r1
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f76:	4690      	mov	r8, r2
 8003f78:	4699      	mov	r9, r3
 8003f7a:	4623      	mov	r3, r4
 8003f7c:	eb18 0303 	adds.w	r3, r8, r3
 8003f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f84:	462b      	mov	r3, r5
 8003f86:	eb49 0303 	adc.w	r3, r9, r3
 8003f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	18db      	adds	r3, r3, r3
 8003fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fa8:	4613      	mov	r3, r2
 8003faa:	eb42 0303 	adc.w	r3, r2, r3
 8003fae:	657b      	str	r3, [r7, #84]	; 0x54
 8003fb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fb8:	f7fc f906 	bl	80001c8 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4b61      	ldr	r3, [pc, #388]	; (8004148 <UART_SetConfig+0x2d4>)
 8003fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	011c      	lsls	r4, r3, #4
 8003fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fdc:	4642      	mov	r2, r8
 8003fde:	464b      	mov	r3, r9
 8003fe0:	1891      	adds	r1, r2, r2
 8003fe2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fe4:	415b      	adcs	r3, r3
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fec:	4641      	mov	r1, r8
 8003fee:	eb12 0a01 	adds.w	sl, r2, r1
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004004:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800400c:	4692      	mov	sl, r2
 800400e:	469b      	mov	fp, r3
 8004010:	4643      	mov	r3, r8
 8004012:	eb1a 0303 	adds.w	r3, sl, r3
 8004016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800401a:	464b      	mov	r3, r9
 800401c:	eb4b 0303 	adc.w	r3, fp, r3
 8004020:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004030:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004034:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004038:	460b      	mov	r3, r1
 800403a:	18db      	adds	r3, r3, r3
 800403c:	643b      	str	r3, [r7, #64]	; 0x40
 800403e:	4613      	mov	r3, r2
 8004040:	eb42 0303 	adc.w	r3, r2, r3
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
 8004046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800404a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800404e:	f7fc f8bb 	bl	80001c8 <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4611      	mov	r1, r2
 8004058:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <UART_SetConfig+0x2d4>)
 800405a:	fba3 2301 	umull	r2, r3, r3, r1
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	2264      	movs	r2, #100	; 0x64
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	1acb      	subs	r3, r1, r3
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800406e:	4b36      	ldr	r3, [pc, #216]	; (8004148 <UART_SetConfig+0x2d4>)
 8004070:	fba3 2302 	umull	r2, r3, r3, r2
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800407c:	441c      	add	r4, r3
 800407e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004082:	2200      	movs	r2, #0
 8004084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004088:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800408c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004090:	4642      	mov	r2, r8
 8004092:	464b      	mov	r3, r9
 8004094:	1891      	adds	r1, r2, r2
 8004096:	63b9      	str	r1, [r7, #56]	; 0x38
 8004098:	415b      	adcs	r3, r3
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040a0:	4641      	mov	r1, r8
 80040a2:	1851      	adds	r1, r2, r1
 80040a4:	6339      	str	r1, [r7, #48]	; 0x30
 80040a6:	4649      	mov	r1, r9
 80040a8:	414b      	adcs	r3, r1
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040b8:	4659      	mov	r1, fp
 80040ba:	00cb      	lsls	r3, r1, #3
 80040bc:	4651      	mov	r1, sl
 80040be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c2:	4651      	mov	r1, sl
 80040c4:	00ca      	lsls	r2, r1, #3
 80040c6:	4610      	mov	r0, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	4642      	mov	r2, r8
 80040ce:	189b      	adds	r3, r3, r2
 80040d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040d4:	464b      	mov	r3, r9
 80040d6:	460a      	mov	r2, r1
 80040d8:	eb42 0303 	adc.w	r3, r2, r3
 80040dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040f4:	460b      	mov	r3, r1
 80040f6:	18db      	adds	r3, r3, r3
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fa:	4613      	mov	r3, r2
 80040fc:	eb42 0303 	adc.w	r3, r2, r3
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800410a:	f7fc f85d 	bl	80001c8 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <UART_SetConfig+0x2d4>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	; 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	3332      	adds	r3, #50	; 0x32
 8004126:	4a08      	ldr	r2, [pc, #32]	; (8004148 <UART_SetConfig+0x2d4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 0207 	and.w	r2, r3, #7
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4422      	add	r2, r4
 800413a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800413c:	e105      	b.n	800434a <UART_SetConfig+0x4d6>
 800413e:	bf00      	nop
 8004140:	40011000 	.word	0x40011000
 8004144:	40011400 	.word	0x40011400
 8004148:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800414c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004150:	2200      	movs	r2, #0
 8004152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004156:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800415a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800415e:	4642      	mov	r2, r8
 8004160:	464b      	mov	r3, r9
 8004162:	1891      	adds	r1, r2, r2
 8004164:	6239      	str	r1, [r7, #32]
 8004166:	415b      	adcs	r3, r3
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
 800416a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800416e:	4641      	mov	r1, r8
 8004170:	1854      	adds	r4, r2, r1
 8004172:	4649      	mov	r1, r9
 8004174:	eb43 0501 	adc.w	r5, r3, r1
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	00eb      	lsls	r3, r5, #3
 8004182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004186:	00e2      	lsls	r2, r4, #3
 8004188:	4614      	mov	r4, r2
 800418a:	461d      	mov	r5, r3
 800418c:	4643      	mov	r3, r8
 800418e:	18e3      	adds	r3, r4, r3
 8004190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004194:	464b      	mov	r3, r9
 8004196:	eb45 0303 	adc.w	r3, r5, r3
 800419a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041ba:	4629      	mov	r1, r5
 80041bc:	008b      	lsls	r3, r1, #2
 80041be:	4621      	mov	r1, r4
 80041c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c4:	4621      	mov	r1, r4
 80041c6:	008a      	lsls	r2, r1, #2
 80041c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041cc:	f7fb fffc 	bl	80001c8 <__aeabi_uldivmod>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4b60      	ldr	r3, [pc, #384]	; (8004358 <UART_SetConfig+0x4e4>)
 80041d6:	fba3 2302 	umull	r2, r3, r3, r2
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	011c      	lsls	r4, r3, #4
 80041de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041f0:	4642      	mov	r2, r8
 80041f2:	464b      	mov	r3, r9
 80041f4:	1891      	adds	r1, r2, r2
 80041f6:	61b9      	str	r1, [r7, #24]
 80041f8:	415b      	adcs	r3, r3
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004200:	4641      	mov	r1, r8
 8004202:	1851      	adds	r1, r2, r1
 8004204:	6139      	str	r1, [r7, #16]
 8004206:	4649      	mov	r1, r9
 8004208:	414b      	adcs	r3, r1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004218:	4659      	mov	r1, fp
 800421a:	00cb      	lsls	r3, r1, #3
 800421c:	4651      	mov	r1, sl
 800421e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004222:	4651      	mov	r1, sl
 8004224:	00ca      	lsls	r2, r1, #3
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	4603      	mov	r3, r0
 800422c:	4642      	mov	r2, r8
 800422e:	189b      	adds	r3, r3, r2
 8004230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004234:	464b      	mov	r3, r9
 8004236:	460a      	mov	r2, r1
 8004238:	eb42 0303 	adc.w	r3, r2, r3
 800423c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	67bb      	str	r3, [r7, #120]	; 0x78
 800424a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004258:	4649      	mov	r1, r9
 800425a:	008b      	lsls	r3, r1, #2
 800425c:	4641      	mov	r1, r8
 800425e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004262:	4641      	mov	r1, r8
 8004264:	008a      	lsls	r2, r1, #2
 8004266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800426a:	f7fb ffad 	bl	80001c8 <__aeabi_uldivmod>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4b39      	ldr	r3, [pc, #228]	; (8004358 <UART_SetConfig+0x4e4>)
 8004274:	fba3 1302 	umull	r1, r3, r3, r2
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	2164      	movs	r1, #100	; 0x64
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	3332      	adds	r3, #50	; 0x32
 8004286:	4a34      	ldr	r2, [pc, #208]	; (8004358 <UART_SetConfig+0x4e4>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004292:	441c      	add	r4, r3
 8004294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004298:	2200      	movs	r2, #0
 800429a:	673b      	str	r3, [r7, #112]	; 0x70
 800429c:	677a      	str	r2, [r7, #116]	; 0x74
 800429e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042a2:	4642      	mov	r2, r8
 80042a4:	464b      	mov	r3, r9
 80042a6:	1891      	adds	r1, r2, r2
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	415b      	adcs	r3, r3
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b2:	4641      	mov	r1, r8
 80042b4:	1851      	adds	r1, r2, r1
 80042b6:	6039      	str	r1, [r7, #0]
 80042b8:	4649      	mov	r1, r9
 80042ba:	414b      	adcs	r3, r1
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042ca:	4659      	mov	r1, fp
 80042cc:	00cb      	lsls	r3, r1, #3
 80042ce:	4651      	mov	r1, sl
 80042d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d4:	4651      	mov	r1, sl
 80042d6:	00ca      	lsls	r2, r1, #3
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	4603      	mov	r3, r0
 80042de:	4642      	mov	r2, r8
 80042e0:	189b      	adds	r3, r3, r2
 80042e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80042e4:	464b      	mov	r3, r9
 80042e6:	460a      	mov	r2, r1
 80042e8:	eb42 0303 	adc.w	r3, r2, r3
 80042ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	663b      	str	r3, [r7, #96]	; 0x60
 80042f8:	667a      	str	r2, [r7, #100]	; 0x64
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004306:	4649      	mov	r1, r9
 8004308:	008b      	lsls	r3, r1, #2
 800430a:	4641      	mov	r1, r8
 800430c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004310:	4641      	mov	r1, r8
 8004312:	008a      	lsls	r2, r1, #2
 8004314:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004318:	f7fb ff56 	bl	80001c8 <__aeabi_uldivmod>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <UART_SetConfig+0x4e4>)
 8004322:	fba3 1302 	umull	r1, r3, r3, r2
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2164      	movs	r1, #100	; 0x64
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	3332      	adds	r3, #50	; 0x32
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <UART_SetConfig+0x4e4>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	f003 020f 	and.w	r2, r3, #15
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4422      	add	r2, r4
 8004348:	609a      	str	r2, [r3, #8]
}
 800434a:	bf00      	nop
 800434c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004350:	46bd      	mov	sp, r7
 8004352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004356:	bf00      	nop
 8004358:	51eb851f 	.word	0x51eb851f

0800435c <__libc_init_array>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	4d0d      	ldr	r5, [pc, #52]	; (8004394 <__libc_init_array+0x38>)
 8004360:	4c0d      	ldr	r4, [pc, #52]	; (8004398 <__libc_init_array+0x3c>)
 8004362:	1b64      	subs	r4, r4, r5
 8004364:	10a4      	asrs	r4, r4, #2
 8004366:	2600      	movs	r6, #0
 8004368:	42a6      	cmp	r6, r4
 800436a:	d109      	bne.n	8004380 <__libc_init_array+0x24>
 800436c:	4d0b      	ldr	r5, [pc, #44]	; (800439c <__libc_init_array+0x40>)
 800436e:	4c0c      	ldr	r4, [pc, #48]	; (80043a0 <__libc_init_array+0x44>)
 8004370:	f000 f820 	bl	80043b4 <_init>
 8004374:	1b64      	subs	r4, r4, r5
 8004376:	10a4      	asrs	r4, r4, #2
 8004378:	2600      	movs	r6, #0
 800437a:	42a6      	cmp	r6, r4
 800437c:	d105      	bne.n	800438a <__libc_init_array+0x2e>
 800437e:	bd70      	pop	{r4, r5, r6, pc}
 8004380:	f855 3b04 	ldr.w	r3, [r5], #4
 8004384:	4798      	blx	r3
 8004386:	3601      	adds	r6, #1
 8004388:	e7ee      	b.n	8004368 <__libc_init_array+0xc>
 800438a:	f855 3b04 	ldr.w	r3, [r5], #4
 800438e:	4798      	blx	r3
 8004390:	3601      	adds	r6, #1
 8004392:	e7f2      	b.n	800437a <__libc_init_array+0x1e>
 8004394:	0800440c 	.word	0x0800440c
 8004398:	0800440c 	.word	0x0800440c
 800439c:	0800440c 	.word	0x0800440c
 80043a0:	08004410 	.word	0x08004410

080043a4 <memset>:
 80043a4:	4402      	add	r2, r0
 80043a6:	4603      	mov	r3, r0
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d100      	bne.n	80043ae <memset+0xa>
 80043ac:	4770      	bx	lr
 80043ae:	f803 1b01 	strb.w	r1, [r3], #1
 80043b2:	e7f9      	b.n	80043a8 <memset+0x4>

080043b4 <_init>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr

080043c0 <_fini>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr
